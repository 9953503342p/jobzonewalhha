{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\admin\\\\components\\\\courses\\\\courses-post-a-course.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport EmpSidebarSection from '../../common/empsidebar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EmpPostAJobPage() {\n  _s();\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const addQuestion = () => {\n    setFormData(prevData => ({\n      ...prevData,\n      question: [...prevData.question, ''] // Add a new empty question to the array\n    }));\n  };\n  const [formData, setFormData] = useState({\n    jobtitle: '',\n    jobcategory: '',\n    jobtype: '',\n    offeredsalary: '',\n    experience: '',\n    qualification: '',\n    gender: '',\n    country: '',\n    city: '',\n    location: '',\n    latitude: '',\n    longitude: '',\n    question: [],\n    // Make sure this is an array of strings\n    email: '',\n    website: '',\n    estsince: '',\n    completeaddress: '',\n    description: '',\n    startDate: '',\n    endDate: '',\n    Vacnices: ''\n  });\n  const handleQuestionChange = (e, index) => {\n    const {\n      value\n    } = e.target;\n    const updatedQuestions = [...formData.question];\n    updatedQuestions[index] = value; // Update the specific question at the given index\n\n    setFormData(prevData => ({\n      ...prevData,\n      question: updatedQuestions\n    }));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'question') {\n      // Assuming 'question' is an array of strings, update accordingly\n      setFormData(prevData => ({\n        ...prevData,\n        question: value.split(',').map(item => item.trim()) // Split by commas and trim spaces\n      }));\n    } else {\n      setFormData(prevData => ({\n        ...prevData,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:8080/post-job`, {\n        method: 'POST',\n        credentials: \"include\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const result = await response.json();\n      if (result.success) {\n        setSuccess('Job posted successfully');\n        setError('');\n      } else {\n        setError('All fields are required');\n      }\n    } catch (error) {\n      console.error('Error posting job:', error);\n      setError('Error posting job');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EmpSidebarSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EmpPostAJobPage, \"t5AlPeDvbxiI+RIAZbyxnutQO4o=\");\n_c = EmpPostAJobPage;\nexport default EmpPostAJobPage;\nvar _c;\n$RefreshReg$(_c, \"EmpPostAJobPage\");","map":{"version":3,"names":["React","useState","EmpSidebarSection","jsxDEV","_jsxDEV","Fragment","_Fragment","EmpPostAJobPage","_s","error","setError","success","setSuccess","addQuestion","setFormData","prevData","question","formData","jobtitle","jobcategory","jobtype","offeredsalary","experience","qualification","gender","country","city","location","latitude","longitude","email","website","estsince","completeaddress","description","startDate","endDate","Vacnices","handleQuestionChange","e","index","value","target","updatedQuestions","handleChange","name","split","map","item","trim","handleSubmit","preventDefault","response","fetch","method","credentials","headers","body","JSON","stringify","result","json","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/admin/components/courses/courses-post-a-course.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport EmpSidebarSection from '../../common/empsidebar';\r\n\r\nfunction EmpPostAJobPage() {\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n    const addQuestion = () => {\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          question: [...prevData.question, ''] // Add a new empty question to the array\r\n        }));\r\n      };\r\n    const [formData, setFormData] = useState({\r\n      jobtitle: '',\r\n      jobcategory: '',\r\n      jobtype: '',\r\n      offeredsalary: '',\r\n      experience: '',\r\n      qualification: '',\r\n      gender: '',\r\n      country: '',\r\n      city: '',\r\n      location: '',\r\n      latitude: '',\r\n      longitude: '',\r\n      question: [], // Make sure this is an array of strings\r\n      email: '',\r\n      website: '',\r\n      estsince: '',\r\n      completeaddress: '',\r\n      description: '',\r\n      startDate: '',\r\n      endDate: '',\r\n      Vacnices: ''\r\n    });\r\n \r\n    const handleQuestionChange = (e, index) => {\r\n        const { value } = e.target;\r\n        const updatedQuestions = [...formData.question];\r\n        updatedQuestions[index] = value; // Update the specific question at the given index\r\n      \r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          question: updatedQuestions\r\n        }));\r\n      };\r\n\r\n    const handleChange = (e) => {\r\n      const { name, value } = e.target;\r\n    \r\n      if (name === 'question') {\r\n        // Assuming 'question' is an array of strings, update accordingly\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          question: value.split(',').map((item) => item.trim()) // Split by commas and trim spaces\r\n        }));\r\n      } else {\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          [name]: value\r\n        }));\r\n      }\r\n    };\r\n    \r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n      e.preventDefault();\r\n    \r\n      try {\r\n        const response = await fetch(`http://localhost:8080/post-job`, {\r\n          method: 'POST',\r\n          credentials: \"include\",\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(formData)\r\n        });\r\n    \r\n        const result = await response.json();\r\n    \r\n        if (result.success) {\r\n          setSuccess('Job posted successfully');\r\n          setError('');\r\n        } else {\r\n          setError('All fields are required');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error posting job:', error);\r\n        setError('Error posting job');\r\n      }\r\n    };\r\n    \r\n    \r\n    return (\r\n        <>\r\n\r\n            <EmpSidebarSection />\r\n            {/*Basic Information*/}\r\n      \r\n        </>\r\n    )\r\n}\r\nexport default EmpPostAJobPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}