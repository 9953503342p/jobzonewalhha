{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\jobs\\\\section-jobs-list.jsx\",\n  _s = $RefreshSig$();\nimport JobZImage from \"../../../../common/jobz-img\";\nimport { NavLink } from \"react-router-dom\";\nimport { publicUser } from \"../../../../../globals/route-names\";\nimport SectionPagination from \"../common/section-pagination\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionJobsList() {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/post-job');\n        if (!response.ok) throw new Error('Failed to fetch data');\n        const data = await response.json();\n        setJobs(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, []);\n  const indexOfLastJob = currentPage * perPage;\n  const indexOfFirstJob = indexOfLastJob - perPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading internships...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 22\n  }, this);\n  if (jobs.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No internships available at the moment.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"twm-jobs-list-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SectionPagination, {\n        totalItems: jobs.length,\n        perPage: perPage,\n        currentPage: currentPage,\n        paginate: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(SectionJobsList, \"Giyn8t6kmIZkTFIompGdrd3RiAs=\");\n_c = SectionJobsList;\nexport default SectionJobsList;\nvar _c;\n$RefreshReg$(_c, \"SectionJobsList\");","map":{"version":3,"names":["JobZImage","NavLink","publicUser","SectionPagination","React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionJobsList","_s","jobs","setJobs","currentPage","setCurrentPage","loading","setLoading","error","setError","fetchJobs","response","fetch","ok","Error","data","json","err","message","indexOfLastJob","perPage","indexOfFirstJob","currentJobs","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","totalItems","paginate","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-list.jsx"],"sourcesContent":["import JobZImage from \"../../../../common/jobz-img\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { publicUser } from \"../../../../../globals/route-names\";\r\nimport SectionPagination from \"../common/section-pagination\";\r\nimport React, { useEffect, useState } from 'react';\r\nfunction SectionJobsList() {\r\n const [jobs, setJobs] = useState([]);\r\n   const [currentPage, setCurrentPage] = useState(1);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState('');\r\n \r\n   useEffect(() => {\r\n     const fetchJobs = async () => {\r\n       try {\r\n         const response = await fetch('http://localhost:8080/post-job');\r\n         if (!response.ok) throw new Error('Failed to fetch data');\r\n         const data = await response.json();\r\n         setJobs(data);\r\n       } catch (err) {\r\n         setError(err.message);\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n     fetchJobs();\r\n   }, []);\r\n \r\n   const indexOfLastJob = currentPage * perPage;\r\n   const indexOfFirstJob = indexOfLastJob - perPage;\r\n   const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\r\n \r\n   if (loading) return <p>Loading internships...</p>;\r\n   if (error) return <p>Error: {error}</p>;\r\n   if (jobs.length === 0) return <p>No internships available at the moment.</p>;\r\n     \r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"twm-jobs-list-wrap\">\r\n                <ul>\r\n   \r\n    </ul>\r\n                </div>\r\n                <SectionPagination\r\n               totalItems={jobs.length}\r\n               perPage={perPage}\r\n               currentPage={currentPage}\r\n               paginate={setCurrentPage} />\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SectionJobsList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}