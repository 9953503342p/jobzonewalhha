{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\jobs\\\\section-jobs-grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport SectionPagination from \"../common/section-pagination\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionJobsGrid({\n  perPage\n}) {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchJobs();\n  }, [currentPage]);\n  const fetchJobs = () => {\n    setLoading(true); // Set loading to true before fetching data\n    fetch(`http://localhost:8080/post-job?page=${currentPage}&perPage=${perPage}`).then(response => response.json()).then(data => {\n      setJobs(data);\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      console.error(\"Error fetching jobs:\", error);\n      setLoading(false); // Set loading to false even if there is an error\n    });\n  };\n  const getDateDifference = startDate => {\n    const now = new Date();\n    const start = new Date(startDate);\n    if (isNaN(start)) {\n      console.error(\"Invalid start date:\", startDate);\n      return {\n        diffDays: 0,\n        diffMonths: 0\n      };\n    }\n    const diffTime = now - start;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\n    return {\n      diffDays,\n      diffMonths\n    };\n  };\n  const indexOfLastJob = currentPage * perPage;\n  const indexOfFirstJob = indexOfLastJob - perPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) // Display a loading message or spinner\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: currentJobs.map(job => {\n          const {\n            diffDays,\n            diffMonths\n          } = getDateDifference(job.startDate);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-6 col-md-12 m-b30\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-jobs-grid-style1\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-media\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `http://localhost:8080/${job.userId.companylogo || 'default-logo.png'}`,\n                  alt: job.userId.companyName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"twm-job-post-duration\",\n                children: diffMonths > 0 ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago` : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-jobs-category green\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"twm-bg-sky\",\n                  children: job.jobtype\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-mid-content\",\n                children: [/*#__PURE__*/_jsxDEV(NavLink, {\n                  to: `/job-detail/${job._id}`,\n                  children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: job.jobcategory\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: job.location\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: job.website,\n                  className: \"twm-job-websites site-text-primary\",\n                  children: job.website\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-right-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"twm-jobs-amount\",\n                  children: [job.offeredsalary, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"/ Month\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n                  to: `/job-detail/${job._id}`,\n                  children: \"Browse Job\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this)\n          }, job._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SectionPagination, {\n        totalItems: jobs.length,\n        perPage: perPage,\n        currentPage: currentPage,\n        paginate: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n_s(SectionJobsGrid, \"I3nQrcpfZhqygpUJbUkJ3FmWj74=\");\n_c = SectionJobsGrid;\nexport default SectionJobsGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionJobsGrid\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","SectionPagination","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionJobsGrid","perPage","_s","jobs","setJobs","currentPage","setCurrentPage","loading","setLoading","fetchJobs","fetch","then","response","json","data","catch","error","console","getDateDifference","startDate","now","Date","start","isNaN","diffDays","diffMonths","diffTime","Math","floor","indexOfLastJob","indexOfFirstJob","currentJobs","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","job","src","userId","companylogo","alt","companyName","jobtype","to","_id","jobcategory","location","href","website","offeredsalary","totalItems","length","paginate","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-grid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SectionPagination from \"../common/section-pagination\";\r\n\r\nfunction SectionJobsGrid({ perPage }) {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchJobs();\r\n  }, [currentPage]);\r\n\r\n  const fetchJobs = () => {\r\n    setLoading(true); // Set loading to true before fetching data\r\n    fetch(`http://localhost:8080/post-job?page=${currentPage}&perPage=${perPage}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJobs(data);\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching jobs:\", error);\r\n        setLoading(false); // Set loading to false even if there is an error\r\n      });\r\n  };\r\n\r\n  const getDateDifference = (startDate) => {\r\n    const now = new Date();\r\n    const start = new Date(startDate);\r\n    if (isNaN(start)) {\r\n      console.error(\"Invalid start date:\", startDate);\r\n      return { diffDays: 0, diffMonths: 0 };\r\n    }\r\n    const diffTime = now - start;\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\r\n    return { diffDays, diffMonths };\r\n  };\r\n\r\n  const indexOfLastJob = currentPage * perPage;\r\n  const indexOfFirstJob = indexOfLastJob - perPage;\r\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div>Loading...</div> // Display a loading message or spinner\r\n      ) : (\r\n        <>\r\n          <div className=\"row\">\r\n            {currentJobs.map((job) => {\r\n              const { diffDays, diffMonths } = getDateDifference(job.startDate);\r\n              return (\r\n                <div className=\"col-lg-6 col-md-12 m-b30\" key={job._id}>\r\n                  <div className=\"twm-jobs-grid-style1\">\r\n                    <div className=\"twm-media\">\r\n                      <img\r\n                        src={`http://localhost:8080/${job.userId.companylogo || 'default-logo.png'}`}\r\n                        alt={job.userId.companyName}\r\n                      />\r\n                    </div>\r\n                    <span className=\"twm-job-post-duration\">\r\n                      {diffMonths > 0\r\n                        ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago`\r\n                        : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`}\r\n                    </span>\r\n                    <div className=\"twm-jobs-category green\">\r\n                      <span className=\"twm-bg-sky\">{job.jobtype}</span>\r\n                    </div>\r\n                    <div className=\"twm-mid-content\">\r\n                      <NavLink to={`/job-detail/${job._id}`}>\r\n                        <h4>{job.jobcategory}</h4>\r\n                      </NavLink>\r\n                      <p>{job.location}</p>\r\n                      <a href={job.website} className=\"twm-job-websites site-text-primary\">\r\n                        {job.website}\r\n                      </a>\r\n                    </div>\r\n                    <div className=\"twm-right-content\">\r\n                      <div className=\"twm-jobs-amount\">\r\n                        {job.offeredsalary} <span>/ Month</span>\r\n                      </div>\r\n                      <NavLink to={`/job-detail/${job._id}`}>Browse Job</NavLink>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <SectionPagination\r\n            totalItems={jobs.length}\r\n            perPage={perPage}\r\n            currentPage={currentPage}\r\n            paginate={setCurrentPage}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SectionJobsGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}