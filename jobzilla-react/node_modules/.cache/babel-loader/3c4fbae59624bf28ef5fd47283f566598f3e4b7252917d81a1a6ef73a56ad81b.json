{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\candidates\\\\section-can-experience.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionCandidateExperience() {\n  _s();\n  const [employmentData, setEmploymentData] = useState([]); // To store fetched employment data\n  const [loading, setLoading] = useState(true); // To show loading state while data is fetching\n  const [error, setError] = useState(null); // To handle errors\n  const {\n    resumeId\n  } = useParams(); // Get resumeId from URL parameters\n\n  useEffect(() => {\n    const fetchEmploymentData = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/resume/${resumeId}`); // Make API call with resumeId\n        if (!response.ok) {\n          throw new Error('Failed to fetch resume data');\n        }\n        const data = await response.json();\n        setEmploymentData(data.employment || []); // Assuming your response contains employment data in the 'employment' field\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmploymentData();\n  }, [resumeId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"twm-s-title\",\n      children: \"Work Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"twm-timing-list-wrap\",\n      children: employmentData.length > 0 ? employmentData.map((job, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"twm-timing-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"twm-time-list-date\",\n          children: [job.startDate ? new Date(job.startDate).toLocaleDateString(undefined, {\n            year: 'numeric'\n          }) : 'N/A', \" to \", job.endDate ? new Date(job.endDate).toLocaleDateString(undefined, {\n            year: 'numeric'\n          }) : 'Present']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"twm-time-list-title\",\n          children: job.organization || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"twm-time-list-position\",\n          children: job.designation || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"twm-time-list-discription\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.jobDescription || 'No description available.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No work experience available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(SectionCandidateExperience, \"Qmrc1n3mI0ptQZVm/P9fvCUFhS8=\", false, function () {\n  return [useParams];\n});\n_c = SectionCandidateExperience;\nexport default SectionCandidateExperience;\nvar _c;\n$RefreshReg$(_c, \"SectionCandidateExperience\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionCandidateExperience","_s","employmentData","setEmploymentData","loading","setLoading","error","setError","resumeId","fetchEmploymentData","response","fetch","process","env","REACT_APP_API_URL","ok","Error","data","json","employment","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","job","index","startDate","Date","toLocaleDateString","undefined","year","endDate","organization","designation","jobDescription","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/candidates/section-can-experience.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction SectionCandidateExperience() {\n    const [employmentData, setEmploymentData] = useState([]); // To store fetched employment data\n    const [loading, setLoading] = useState(true); // To show loading state while data is fetching\n    const [error, setError] = useState(null); // To handle errors\n    const { resumeId } = useParams(); // Get resumeId from URL parameters\n\n    useEffect(() => {\n        const fetchEmploymentData = async () => {\n            try {\n                const response = await fetch(`${process.env.REACT_APP_API_URL}/resume/${resumeId}`); // Make API call with resumeId\n                if (!response.ok) {\n                    throw new Error('Failed to fetch resume data');\n                }\n                const data = await response.json();\n                setEmploymentData(data.employment || []); // Assuming your response contains employment data in the 'employment' field\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchEmploymentData();\n    }, [resumeId]);\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>Error: {error}</p>;\n    }\n\n    return (\n        <>\n            <h4 className=\"twm-s-title\">Work Experience</h4>\n            <div className=\"twm-timing-list-wrap\">\n                {employmentData.length > 0 ? (\n                    employmentData.map((job, index) => (\n                        <div className=\"twm-timing-list\" key={index}>\n                            <div className=\"twm-time-list-date\">\n                            {job.startDate ? new Date(job.startDate).toLocaleDateString(undefined, { year: 'numeric' }) : 'N/A'} to {job.endDate ? new Date(job.endDate).toLocaleDateString(undefined, { year: 'numeric' }) : 'Present'}\n                            </div>\n                            <div className=\"twm-time-list-title\">{job.organization || 'N/A'}</div>\n                            <div className=\"twm-time-list-position\">{job.designation || 'N/A'}</div>\n                            <div className=\"twm-time-list-discription\">\n                                <p>{job.jobDescription || 'No description available.'}</p>\n                            </div>\n                        </div>\n                    ))\n                ) : (\n                    <p>No work experience available.</p>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default SectionCandidateExperience;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}