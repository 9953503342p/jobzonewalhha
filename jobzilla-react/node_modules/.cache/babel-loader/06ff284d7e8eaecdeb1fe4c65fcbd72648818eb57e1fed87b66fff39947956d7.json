{"ast":null,"code":"app.get('/jobs/filter', async (req, res) => {\n  try {\n    const {\n      jobcategory,\n      offersalary,\n      location,\n      datePosted\n    } = req.query;\n    const filter = {};\n\n    // Apply filters only if they are provided\n    if (jobcategory) filter.jobcategory = jobcategory;\n    if (offersalary) filter.offeredsalary = {\n      $gte: parseFloat(offersalary)\n    };\n    if (location) filter.location = {\n      $regex: new RegExp(location, 'i')\n    };\n    if (datePosted) {\n      const now = new Date();\n      let startDate = null;\n      switch (datePosted) {\n        case 'last 24 hours':\n          startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n          break;\n        case 'last 7 days':\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case 'last 30 days':\n          startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n      }\n      if (startDate) filter.startDate = {\n        $gte: startDate.toISOString()\n      };\n    }\n\n    // If no filters, return all jobs\n    const jobs = await Postjob.find(filter).exec();\n    res.status(200).json(jobs || []);\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});","map":{"version":3,"names":["app","get","req","res","jobcategory","offersalary","location","datePosted","query","filter","offeredsalary","$gte","parseFloat","$regex","RegExp","now","Date","startDate","getTime","toISOString","jobs","Postjob","find","exec","status","json","error","console","message"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-grid.jsx"],"sourcesContent":["app.get('/jobs/filter', async (req, res) => {\r\n    try {\r\n        const { jobcategory, offersalary, location, datePosted } = req.query;\r\n        const filter = {};\r\n\r\n        // Apply filters only if they are provided\r\n        if (jobcategory) filter.jobcategory = jobcategory;\r\n        if (offersalary) filter.offeredsalary = { $gte: parseFloat(offersalary) };\r\n        if (location) filter.location = { $regex: new RegExp(location, 'i') };\r\n\r\n        if (datePosted) {\r\n            const now = new Date();\r\n            let startDate = null;\r\n\r\n            switch (datePosted) {\r\n                case 'last 24 hours':\r\n                    startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\r\n                    break;\r\n                case 'last 7 days':\r\n                    startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                    break;\r\n                case 'last 30 days':\r\n                    startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n                    break;\r\n            }\r\n\r\n            if (startDate) filter.startDate = { $gte: startDate.toISOString() };\r\n        }\r\n\r\n        // If no filters, return all jobs\r\n        const jobs = await Postjob.find(filter).exec();\r\n        res.status(200).json(jobs || []);\r\n    } catch (error) {\r\n        console.error('Error fetching jobs:', error);\r\n        res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n});\r\n"],"mappings":"AAAAA,GAAG,CAACC,GAAG,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IACA,MAAM;MAAEC,WAAW;MAAEC,WAAW;MAAEC,QAAQ;MAAEC;IAAW,CAAC,GAAGL,GAAG,CAACM,KAAK;IACpE,MAAMC,MAAM,GAAG,CAAC,CAAC;;IAEjB;IACA,IAAIL,WAAW,EAAEK,MAAM,CAACL,WAAW,GAAGA,WAAW;IACjD,IAAIC,WAAW,EAAEI,MAAM,CAACC,aAAa,GAAG;MAAEC,IAAI,EAAEC,UAAU,CAACP,WAAW;IAAE,CAAC;IACzE,IAAIC,QAAQ,EAAEG,MAAM,CAACH,QAAQ,GAAG;MAAEO,MAAM,EAAE,IAAIC,MAAM,CAACR,QAAQ,EAAE,GAAG;IAAE,CAAC;IAErE,IAAIC,UAAU,EAAE;MACZ,MAAMQ,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,IAAIC,SAAS,GAAG,IAAI;MAEpB,QAAQV,UAAU;QACd,KAAK,eAAe;UAChBU,SAAS,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;UACzD;QACJ,KAAK,aAAa;UACdD,SAAS,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;UAC7D;QACJ,KAAK,cAAc;UACfD,SAAS,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;UAC9D;MACR;MAEA,IAAID,SAAS,EAAER,MAAM,CAACQ,SAAS,GAAG;QAAEN,IAAI,EAAEM,SAAS,CAACE,WAAW,CAAC;MAAE,CAAC;IACvE;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,IAAI,CAACb,MAAM,CAAC,CAACc,IAAI,CAAC,CAAC;IAC9CpB,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACL,IAAI,IAAI,EAAE,CAAC;EACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CvB,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEG,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC9D;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}