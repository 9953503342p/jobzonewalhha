{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\jobs\\\\section-jobs-grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport SectionPagination from \"../common/section-pagination\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionJobsGrid({\n  perPage,\n  filters\n}) {\n  _s();\n  const [jobs, setJobs] = useState([]); // Initialize as an empty array\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const queryParams = new URLSearchParams(filters).toString();\n        const response = await fetch(`http://localhost:8080/jobs/filter?${queryParams}`);\n        const data = await response.json();\n\n        // Ensure data is an array\n        if (Array.isArray(data)) {\n          setJobs(data);\n        } else {\n          console.error(\"Invalid data format: Expected an array\");\n          setJobs([]); // Fallback to an empty array\n        }\n      } catch (error) {\n        console.error(\"Error fetching jobs:\", error);\n        setJobs([]); // Fallback to an empty array on error\n      }\n    };\n    fetchJobs();\n  }, [filters]); // Re-fetch when filters change\n\n  const getDateDifference = startDate => {\n    const now = new Date();\n    const dateParts = startDate.split(\"/\");\n    if (dateParts.length === 3) {\n      startDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\n    }\n    const start = new Date(startDate);\n    if (isNaN(start)) {\n      console.error(\"Invalid start date:\", startDate);\n      return {\n        diffDays: 0,\n        diffMonths: 0\n      };\n    }\n    const diffTime = now - start;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\n    return {\n      diffDays,\n      diffMonths\n    };\n  };\n  const indexOfLastJob = currentPage * perPage;\n  const indexOfFirstJob = indexOfLastJob - perPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob); // Now jobs is guaranteed to be an array\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: currentJobs.map(job => {\n        const {\n          diffDays,\n          diffMonths\n        } = getDateDifference(job.startDate);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-12 m-b30\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"twm-jobs-grid-style1\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-media\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:8080/${job.userId.companylogo}`,\n                alt: job.userId._id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"twm-job-post-duration\",\n              children: diffMonths > 0 ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago` : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-jobs-category green\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"twm-bg-sky\",\n                children: job.jobtype\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-mid-content\",\n              children: [/*#__PURE__*/_jsxDEV(NavLink, {\n                to: `/job-detail/${job._id}`,\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: job.jobcategory\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: job.location\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: job.website,\n                className: \"twm-job-websites site-text-primary\",\n                children: job.website\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-right-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-jobs-amount\",\n                children: [job.offeredsalary, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"/ Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n                to: `/job-detail/${job._id}`,\n                children: \"Browse Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SectionPagination, {\n      totalItems: jobs.length,\n      perPage: perPage,\n      currentPage: currentPage,\n      paginate: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(SectionJobsGrid, \"tVvkcMdonUGj2Jv5gKa++VlWdvI=\");\n_c = SectionJobsGrid;\nexport default SectionJobsGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionJobsGrid\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","SectionPagination","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionJobsGrid","perPage","filters","_s","jobs","setJobs","currentPage","setCurrentPage","fetchJobs","queryParams","URLSearchParams","toString","response","fetch","data","json","Array","isArray","console","error","getDateDifference","startDate","now","Date","dateParts","split","length","start","isNaN","diffDays","diffMonths","diffTime","Math","floor","indexOfLastJob","indexOfFirstJob","currentJobs","slice","children","className","map","job","src","userId","companylogo","alt","_id","fileName","_jsxFileName","lineNumber","columnNumber","jobtype","to","jobcategory","location","href","website","offeredsalary","totalItems","paginate","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-grid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SectionPagination from \"../common/section-pagination\";\r\n\r\nfunction SectionJobsGrid({ perPage, filters }) {\r\n    const [jobs, setJobs] = useState([]); // Initialize as an empty array\r\n    const [currentPage, setCurrentPage] = useState(1);\r\nuseEffect(() => {\r\n    const fetchJobs = async () => {\r\n        try {\r\n            const queryParams = new URLSearchParams(filters).toString();\r\n            const response = await fetch(`http://localhost:8080/jobs/filter?${queryParams}`);\r\n            const data = await response.json();\r\n\r\n            // Ensure data is an array\r\n            if (Array.isArray(data)) {\r\n                setJobs(data);\r\n            } else {\r\n                console.error(\"Invalid data format: Expected an array\");\r\n                setJobs([]); // Fallback to an empty array\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching jobs:\", error);\r\n            setJobs([]); // Fallback to an empty array on error\r\n        }\r\n    };\r\n\r\n    fetchJobs();\r\n}, [filters]); // Re-fetch when filters change\r\n\r\n    const getDateDifference = (startDate) => {\r\n        const now = new Date();\r\n        const dateParts = startDate.split(\"/\");\r\n        if (dateParts.length === 3) {\r\n            startDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\r\n        }\r\n\r\n        const start = new Date(startDate);\r\n        if (isNaN(start)) {\r\n            console.error(\"Invalid start date:\", startDate);\r\n            return { diffDays: 0, diffMonths: 0 };\r\n        }\r\n\r\n        const diffTime = now - start;\r\n        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n        const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\r\n        return { diffDays, diffMonths };\r\n    };\r\n\r\n    const indexOfLastJob = currentPage * perPage;\r\n    const indexOfFirstJob = indexOfLastJob - perPage;\r\n    const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob); // Now jobs is guaranteed to be an array\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                {currentJobs.map((job) => {\r\n                    const { diffDays, diffMonths } = getDateDifference(job.startDate);\r\n                    return (\r\n                        <div className=\"col-lg-6 col-md-12 m-b30\" key={job._id}>\r\n                            <div className=\"twm-jobs-grid-style1\">\r\n                                <div className=\"twm-media\">\r\n                                    <img\r\n                                        src={`http://localhost:8080/${job.userId.companylogo}`}\r\n                                        alt={job.userId._id}\r\n                                    />\r\n                                </div>\r\n                                <span className=\"twm-job-post-duration\">\r\n                                    {diffMonths > 0\r\n                                        ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago`\r\n                                        : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`}\r\n                                </span>\r\n                                <div className=\"twm-jobs-category green\">\r\n                                    <span className=\"twm-bg-sky\">{job.jobtype}</span>\r\n                                </div>\r\n                                <div className=\"twm-mid-content\">\r\n                                    <NavLink to={`/job-detail/${job._id}`}>\r\n                                        <h4>{job.jobcategory}</h4>\r\n                                    </NavLink>\r\n                                    <p>{job.location}</p>\r\n                                    <a href={job.website} className=\"twm-job-websites site-text-primary\">\r\n                                        {job.website}\r\n                                    </a>\r\n                                </div>\r\n                                <div className=\"twm-right-content\">\r\n                                    <div className=\"twm-jobs-amount\">\r\n                                        {job.offeredsalary} <span>/ Month</span>\r\n                                    </div>\r\n                                    <NavLink to={`/job-detail/${job._id}`}>Browse Job</NavLink>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            <SectionPagination\r\n                totalItems={jobs.length}\r\n                perPage={perPage}\r\n                currentPage={currentPage}\r\n                paginate={setCurrentPage}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SectionJobsGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}