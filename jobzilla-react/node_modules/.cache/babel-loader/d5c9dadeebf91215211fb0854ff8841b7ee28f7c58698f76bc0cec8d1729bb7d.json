{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\jobs\\\\section-jobs-grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport SectionPagination from \"../common/section-pagination\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionJobsGrid({\n  perPage\n}) {\n  _s();\n  const [jobs, setJobs] = useState([]); // Initialize jobs as an empty array\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/post-job\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Ensure data is an array\n        if (Array.isArray(data)) {\n          setJobs(data);\n        } else {\n          console.error(\"Invalid data format: Expected an array\");\n          setJobs([]); // Fallback to an empty array\n        }\n      } catch (error) {\n        console.error(\"Error fetching jobs:\", error);\n        setJobs([]); // Fallback to an empty array on error\n      }\n    };\n    fetchJobs();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  const getDateDifference = startDate => {\n    const now = new Date();\n    const dateParts = startDate.split(\"/\");\n    if (dateParts.length === 3) {\n      startDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\n    }\n    const start = new Date(startDate);\n    if (isNaN(start)) {\n      console.error(\"Invalid start date:\", startDate);\n      return {\n        diffDays: 0,\n        diffMonths: 0\n      };\n    }\n    const diffTime = now - start;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\n    return {\n      diffDays,\n      diffMonths\n    };\n  };\n  const indexOfLastJob = currentPage * perPage;\n  const indexOfFirstJob = indexOfLastJob - perPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: currentJobs.length > 0 ? currentJobs.map(job => {\n        const {\n          diffDays,\n          diffMonths\n        } = getDateDifference(job.startDate);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-12 m-b30\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"twm-jobs-grid-style1\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-media\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:8080/${job.userId.companylogo}`,\n                alt: job.userId._id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"twm-job-post-duration\",\n              children: diffMonths > 0 ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago` : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-jobs-category green\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"twm-bg-sky\",\n                children: job.jobtype\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-mid-content\",\n              children: [/*#__PURE__*/_jsxDEV(NavLink, {\n                to: `/job-detail/${job._id}`,\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: job.jobcategory\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: job.location\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: job.website,\n                className: \"twm-job-websites site-text-primary\",\n                children: job.website\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-right-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-jobs-amount\",\n                children: [job.offeredsalary, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"/ Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 43\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n                to: `/job-detail/${job._id}`,\n                children: \"Browse Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No jobs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SectionPagination, {\n      totalItems: jobs.length,\n      perPage: perPage,\n      currentPage: currentPage,\n      paginate: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(SectionJobsGrid, \"tVvkcMdonUGj2Jv5gKa++VlWdvI=\");\n_c = SectionJobsGrid;\nexport default SectionJobsGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionJobsGrid\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","SectionPagination","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionJobsGrid","perPage","_s","jobs","setJobs","currentPage","setCurrentPage","fetchJobs","response","fetch","ok","Error","status","data","json","Array","isArray","console","error","getDateDifference","startDate","now","Date","dateParts","split","length","start","isNaN","diffDays","diffMonths","diffTime","Math","floor","indexOfLastJob","indexOfFirstJob","currentJobs","slice","children","className","map","job","src","userId","companylogo","alt","_id","fileName","_jsxFileName","lineNumber","columnNumber","jobtype","to","jobcategory","location","href","website","offeredsalary","totalItems","paginate","_c","$RefreshReg$"],"sources":["C:/Project/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-grid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SectionPagination from \"../common/section-pagination\";\r\n\r\nfunction SectionJobsGrid({ perPage }) {\r\n  const [jobs, setJobs] = useState([]); // Initialize jobs as an empty array\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8080/post-job\");\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        // Ensure data is an array\r\n        if (Array.isArray(data)) {\r\n          setJobs(data);\r\n        } else {\r\n          console.error(\"Invalid data format: Expected an array\");\r\n          setJobs([]); // Fallback to an empty array\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching jobs:\", error);\r\n        setJobs([]); // Fallback to an empty array on error\r\n      }\r\n    };\r\n\r\n    fetchJobs();\r\n  }, []); // Empty dependency array ensures this runs only once on mount\r\n\r\n  const getDateDifference = (startDate) => {\r\n    const now = new Date();\r\n    const dateParts = startDate.split(\"/\");\r\n    if (dateParts.length === 3) {\r\n      startDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\r\n    }\r\n\r\n    const start = new Date(startDate);\r\n    if (isNaN(start)) {\r\n      console.error(\"Invalid start date:\", startDate);\r\n      return { diffDays: 0, diffMonths: 0 };\r\n    }\r\n\r\n    const diffTime = now - start;\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\r\n    return { diffDays, diffMonths };\r\n  };\r\n\r\n  const indexOfLastJob = currentPage * perPage;\r\n  const indexOfFirstJob = indexOfLastJob - perPage;\r\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        {currentJobs.length > 0 ? (\r\n          currentJobs.map((job) => {\r\n            const { diffDays, diffMonths } = getDateDifference(job.startDate);\r\n            return (\r\n              <div className=\"col-lg-6 col-md-12 m-b30\" key={job._id}>\r\n                <div className=\"twm-jobs-grid-style1\">\r\n                  <div className=\"twm-media\">\r\n                    <img\r\n                      src={`http://localhost:8080/${job.userId.companylogo}`}\r\n                      alt={job.userId._id}\r\n                    />\r\n                  </div>\r\n                  <span className=\"twm-job-post-duration\">\r\n                    {diffMonths > 0\r\n                      ? `${diffMonths} month${diffMonths > 1 ? \"s\" : \"\"} ago`\r\n                      : `${diffDays} day${diffDays > 1 ? \"s\" : \"\"} ago`}\r\n                  </span>\r\n                  <div className=\"twm-jobs-category green\">\r\n                    <span className=\"twm-bg-sky\">{job.jobtype}</span>\r\n                  </div>\r\n                  <div className=\"twm-mid-content\">\r\n                    <NavLink to={`/job-detail/${job._id}`}>\r\n                      <h4>{job.jobcategory}</h4>\r\n                    </NavLink>\r\n                    <p>{job.location}</p>\r\n                    <a href={job.website} className=\"twm-job-websites site-text-primary\">\r\n                      {job.website}\r\n                    </a>\r\n                  </div>\r\n                  <div className=\"twm-right-content\">\r\n                    <div className=\"twm-jobs-amount\">\r\n                      {job.offeredsalary} <span>/ Month</span>\r\n                    </div>\r\n                    <NavLink to={`/job-detail/${job._id}`}>Browse Job</NavLink>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <div className=\"col-12\">\r\n            <p>No jobs found.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <SectionPagination\r\n        totalItems={jobs.length}\r\n        perPage={perPage}\r\n        currentPage={currentPage}\r\n        paginate={setCurrentPage}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SectionJobsGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}